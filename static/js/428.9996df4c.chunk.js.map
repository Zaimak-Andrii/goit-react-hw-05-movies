{"version":3,"file":"static/js/428.9996df4c.chunk.js","mappings":"0UAGe,SAASA,EAAOC,GAC7B,OACE,SAACC,EAAA,GAAD,kBAASD,GAAT,cACE,SAACE,EAAA,EAAD,CACEC,KAAM,GACNC,MAAM,UACNC,YAAa,CACXC,QAAS,OACTC,eAAgB,SAChBC,OAAQ,cAKjB,C,2FCdOC,IAAAA,QACJA,IAAAA,MAAgB,CACdC,GAAID,IAAAA,OAAAA,WACJE,YAAaF,IAAAA,OAAAA,WACbG,MAAOH,IAAAA,OAAAA,aACNI,YACHA,WCJW,SAASC,EAAT,GAA+B,IAATC,EAAQ,EAARA,KAC7BC,GAAWC,EAAAA,EAAAA,MAEjB,OACE,SAACC,EAAA,GAAD,CACEC,WAAS,EACTC,QAAS,CAAEC,GAAI,EAAGC,GAAI,GACtBC,QAAS,CAAEF,GAAI,EAAGG,GAAI,EAAGF,GAAI,IAH/B,SAKGP,EAAKU,KAAI,gBAAGf,EAAH,EAAGA,GAAIC,EAAP,EAAOA,YAAaC,EAApB,EAAoBA,MAApB,OACR,SAACM,EAAA,GAAD,CAAMQ,MAAI,EAACL,GAAI,EAAGG,GAAI,EAAGF,GAAI,EAA7B,UACE,SAACK,EAAA,EAAD,CAAMC,GAAI,CAAEC,SAAU,KAAtB,UACE,SAACC,EAAA,EAAD,CACEC,UAAWC,EAAAA,GACXC,GAAE,iBAAYvB,GACdwB,MAAO,CAAEC,KAAMnB,GAHjB,UAKE,SAACoB,EAAA,EAAD,CACEL,UAAU,MACVM,OAAO,MACPC,MAAK,UAAKC,EAAAA,EAAAA,KAAAA,UAAAA,MAAAA,QAAL,OAA0C5B,GAC/C6B,IAAK5B,SAXwBF,EAD7B,KAoBf,C,kCC/BY+B,GAAiBC,EAAAA,EAAAA,GAAOC,EAAAA,EAAPD,CAAH,kFAGX,qBAAGE,MAAkBxB,QAAQ,EAA7B,ICCD,SAASyB,IACtB,ICN+BC,EAAKC,EAAIC,EDMxC,GCN+BF,EDc7B,mBCdkCC,EDelCE,EAAAA,EAAAA,kBCfsCD,EDmBxC,SAAuBE,GACrB,OAAOC,EAAAA,EAAAA,QACLD,EAAKE,MAAMC,QAAO,SAACC,EAAKC,GAAN,wBAAmBD,IAAnB,OAA2BC,EAAKC,SAAhC,GAA0C,IAC5D,KAEH,GCvBaC,EAAAA,EAAAA,kBAAiB,CAC7BC,SAAUZ,EACVa,QAAS,oBAAGC,UAAH,OAAuBb,OAAvB,MAAe,EAAf,IACTc,iBAAkB,SAACC,EAAUC,GAC3B,GAAIA,EAASC,OAASF,EAASG,YAC7B,OAAOF,EAASC,OAAS,CAE5B,EACDhB,OAAAA,KDFAkB,EADF,EACEA,WACAC,EAFF,EAEEA,QACAC,EAHF,EAGEA,MACMC,EAJR,EAIEnB,KACAoB,EALF,EAKEA,YACAC,EANF,EAMEA,cAcF,OAAIJ,GAEK,wBAAKC,EAAMI,WAIlB,gCACGH,IAAc,SAACvD,EAAD,CAAYC,KAAMsD,IAEhCH,IAAc,SAACnE,EAAD,CAAQ0E,GAAI,KAEzBP,GAAcI,IAEd,SAAC7B,EAAD,CAAgBiC,QAASH,EAAzB,yBAIP,C","sources":["components/Loader/Loader.jsx","components/MoviesList/MoviesList.props.js","components/MoviesList/MoviesList.jsx","pages/Home/Home.styled.js","pages/Home/Home.page.jsx","hooks/useFetchMovieAPI.js"],"sourcesContent":["import { Box } from '@mui/material';\nimport { RiseLoader } from 'react-spinners';\n\nexport default function Loader(props) {\n  return (\n    <Box {...props}>\n      <RiseLoader\n        size={10}\n        color=\"#1976d2\"\n        cssOverride={{\n          display: 'flex',\n          justifyContent: 'center',\n          margin: '10px 0',\n        }}\n      />\n    </Box>\n  );\n}\n","import PropTypes from 'prop-types';\n\nexport const MoviesListPropTypes = {\n  list: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      poster_path: PropTypes.string.isRequired,\n      title: PropTypes.string.isRequired,\n    }).isRequired\n  ).isRequired,\n};\n","import { Card, CardActionArea, CardMedia, Grid } from '@mui/material';\nimport { Link, useLocation } from 'react-router-dom';\nimport config from 'config';\nimport { MoviesListPropTypes } from './MoviesList.props';\n\nexport default function MoviesList({ list }) {\n  const location = useLocation();\n\n  return (\n    <Grid\n      container\n      spacing={{ xs: 2, md: 3 }}\n      columns={{ xs: 4, sm: 8, md: 15 }}\n    >\n      {list.map(({ id, poster_path, title }) => (\n        <Grid item xs={2} sm={2} md={3} key={id}>\n          <Card sx={{ maxWidth: 250 }}>\n            <CardActionArea\n              component={Link}\n              to={`movies/${id}`}\n              state={{ from: location }}\n            >\n              <CardMedia\n                component=\"img\"\n                height=\"250\"\n                image={`${config.urls.theMovies.image.poster}${poster_path}`}\n                alt={title}\n              />\n            </CardActionArea>\n          </Card>\n        </Grid>\n      ))}\n    </Grid>\n  );\n}\n\nMoviesList.propTypes = MoviesListPropTypes;\n","import styled from '@emotion/styled';\nimport { Button } from '@mui/material';\n\nexport const LoadMoreButton = styled(Button)`\n  display: block;\n  margin: 0 auto;\n  margin-top: ${({ theme }) => theme.spacing(3)};\n`;\n","import { uniqBy } from 'lodash';\nimport TheMovieAPI from 'services/theMovieAPI';\nimport { useFetchMovieAPI } from '../../hooks/useFetchMovieAPI';\nimport Loader from 'components/Loader';\nimport MoviesList from 'components/MoviesList';\nimport { LoadMoreButton } from './Home.styled';\n\nexport default function Home() {\n  const {\n    isFetching,\n    isError,\n    error,\n    data: moviesList,\n    hasNextPage,\n    fetchNextPage,\n  } = useFetchMovieAPI(\n    'thrending-by-day',\n    TheMovieAPI.getThrendingByDay,\n    querySelectFn\n  );\n\n  function querySelectFn(data) {\n    return uniqBy(\n      data.pages.reduce((acc, page) => [...acc, ...page.results], []),\n      'id'\n    );\n  }\n\n  if (isError) {\n    // TODO: Зробити окремий компонент\n    return <h2>{error.message}</h2>;\n  }\n\n  return (\n    <>\n      {moviesList && <MoviesList list={moviesList} />}\n\n      {isFetching && <Loader mt={3} />}\n\n      {!isFetching && hasNextPage && (\n        // TODO: Винейсти в окремий компонент\n        <LoadMoreButton onClick={fetchNextPage}>Load more</LoadMoreButton>\n      )}\n    </>\n  );\n}\n","import { useInfiniteQuery } from 'react-query';\n\nexport const useFetchMovieAPI = (key, fn, select) => {\n  const query = useInfiniteQuery({\n    queryKey: key,\n    queryFn: ({ pageParam = 1 }) => fn(pageParam),\n    getNextPageParam: (lastPage, allPages) => {\n      if (allPages.length < lastPage.total_pages) {\n        return allPages.length + 1;\n      }\n    },\n    select,\n  });\n\n  return query;\n};\n"],"names":["Loader","props","Box","RiseLoader","size","color","cssOverride","display","justifyContent","margin","PropTypes","id","poster_path","title","isRequired","MoviesList","list","location","useLocation","Grid","container","spacing","xs","md","columns","sm","map","item","Card","sx","maxWidth","CardActionArea","component","Link","to","state","from","CardMedia","height","image","config","alt","LoadMoreButton","styled","Button","theme","Home","key","fn","select","TheMovieAPI","data","uniqBy","pages","reduce","acc","page","results","useInfiniteQuery","queryKey","queryFn","pageParam","getNextPageParam","lastPage","allPages","length","total_pages","isFetching","isError","error","moviesList","hasNextPage","fetchNextPage","message","mt","onClick"],"sourceRoot":""}